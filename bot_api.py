
from flask import Flask, request, jsonify
from flask_cors import CORS
import psycopg2
from psycopg2.extras import RealDictCursor
import os
from g4f.client import Client as G4FClient

app = Flask(__name__)
CORS(app)

DATABASE_URL = os.environ.get("DATABASE_URL")

def ask_neural_network(question):
    try:
        client = G4FClient()
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –∫—É—Ä—Å–µ –ø–æ –∏–∑—É—á–µ–Ω–∏—é PHP, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."},
                {"role": "user", "content": f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è 1000 —Å–∏–º–≤–æ–ª–æ–≤:\n{question}"}
            ],
            stream=False,
        )
        answer = response.choices[0].message.content
        if len(answer) > 1000:
            answer = answer[:1000].rstrip() + "..."
        return answer
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."

def find_answer(keywords):
    try:
        conn = psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)
        cursor = conn.cursor()
        match_counts = " + ".join([f"(question ILIKE %s)" for _ in keywords])
        sql = f"""
            SELECT question, answer, ({match_counts}) AS match_count
            FROM faq
            WHERE {" OR ".join(["question ILIKE %s" for _ in keywords])}
            ORDER BY match_count DESC
        """
        params = [f"%{word}%" for word in keywords] * 2
        cursor.execute(sql, params)
        results = cursor.fetchall()
        cursor.close()
        conn.close()

        if not results or results[0]['match_count'] == 0:
            return ask_neural_network(" ".join(keywords))

        max_count = results[0]['match_count']
        best_answers = [r['answer'] for r in results if r['match_count'] == max_count]
        return best_answers[0]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."

@app.route('/')
def root():
    return "API —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ"

@app.route('/chat', methods=['POST', 'OPTIONS'])
def chat():
    if request.method == 'OPTIONS':
        return '', 204  # –æ—Ç–≤–µ—á–∞–µ—Ç "–û–ö" –Ω–∞ preflight
    data = request.json
    message = data.get('message', '')
    keywords = message.lower().split()
    answer = find_answer(keywords)
    return jsonify({'reply': answer})
